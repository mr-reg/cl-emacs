# -*- org-log-done: nil; -*-
#+TODO: TODO IN-PROGRESS | DONE

* What is this?
This is port of the Beast from C to Common Lisp.

* State
Development just started

* Progress
** reader [7/10]
   * [X] basic elisp reader 
   * [X] character syntax reader
   * [X] string reader [4/4]
     * [X] emacs property-string type
     * [X] basic reader for pstrings
     * [X] support escape sequences
     * [X] support character syntax
   * [X] hashtable reader
   * [X] float number reader
   * [X] char tables && sub-char tables
   * [X] bool-vectors
   * [ ] #s( syntax for structs
   * [ ] shorthands
   * [ ] other special reader syntax
   * [ ] markers?
** printer [0/2]
   * [ ] basic print implementation
   * [ ] format
   * [ ] print-circle variable support
** eval [0/1]
   * [ ] lexical scope
   * [ ] let/let*
   * [ ] funcall/apply
   * [ ] eval
   * [ ] macroses
   * [ ] TBD (should not be hard, ya? =)
** other library functions implementation
   * buffers
   * [ ] TBD
** fallback text ui implementation  

* Features
** full elisp compatibility claim

I'm carefully porting all elisp behaviour with all it's weird
exceptions and logic.

** use as more native common lisp as possible

I assume that native common lisp functions are the fastest way to do
the job. Sometimes it will add more functionality to elisp, than
original Emacs has. I don't care if final product will work and we can
pass all tests.

** common lisp implementations support

   Main implementation goes on SBCL + quicklisp setup.

   Planned support:
   * ECL
   * CCL
   * ocicl

* Out of scope
  * any bytecode support: 

    you can use common lisp memory image system to speedup loading.

  * unibyte strings

    all string are multibyte inside, unibyte functions are emulated

  * gui implementation:

    current plan is to implement terminal UI as basic fallback
    mode. Other UI will be designed later as libraries, so everybody
    will be able to extend UI on any platform.

  * xwidgets:

    It is very strange part of original Emacs architecture. I believe
    that GUI integration with other applications can't be unified and
    it should be somehow implemented very close to UI library.

* Known differences with Emacs

  Maybe they will be fixed later

** float-output-format uses cl:format syntax  

   Something like "~,6f" works now, when emacs uses native sprintf
   format string with some basic validations.

** internal string representation does not support symbols above with code #x110000

   We use internal CL char type, when emacs just stores symbols as numbers.

   We use (mod code #x110000) to keep character code in valid range.

** print functions may have little different behavior when printing non-ascii characters

   Emacs has very poor understanding if string contains multibyte
   character without some additional processing. According to emacs
   this "\3757zXZ\0" is not a multibyte string.

** printing of circled data structures in emacs is strange sometimes
   
   Emacs will do this:
   #+begin_src elisp
     > (prin1 (read "#1=(a b c d e f g h . #1#)"))
     (a b c d e f g h a b c d e f g h a b c d e f . #14)
   #+end_src
   
   I barely can understand why it tries to go through the list again.
   But why it does it twice and stops on 'f? No idea, even looking
   into the source code.

   My code does handles such cases more reliable, I hope.

* License

The best things in life are free: GPLv3.

Code in this repo will always complain with GPLv3, as original Emacs
source code does. All dependency libraries should have compatible
licenses.
