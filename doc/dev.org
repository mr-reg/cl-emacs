Copyright (C) 2024 by Gleb Borodulia
Author: Gleb Borodulia <mr.reg@mail.ru>

* cffi symbols conflict detection
#+begin_src sh
nm -D temacs.so | awk '/^[^ ]/{print substr($0, 20)}'  | sed 's/@.*//g'  > temacs.txt
for lib in ~/soft/ccl/lx86cl64 /lib/x86_64-linux-gnu/libdl.so.2 /lib/x86_64-linux-gnu/libm.so.6 /lib/x86_64-linux-gnu/libpthread.so.0 /lib/x86_64-linux-gnu/librt.so.1 /lib/x86_64-linux-gnu/libc.so.6 /lib64/ld-linux-x86-64.so.2
do
        nm -D $lib
done  | awk '/^[^ ]/{print substr($0, 20)}'  | sed 's/@.*//g'  > libs.txt

for lib in /usr/local/bin/ecl /usr/local/lib/libecl.so.21.2 /lib/x86_64-linux-gnu/libc.so.6 /lib/x86_64-linux-gnu/libgmp.so.10 /lib/x86_64-linux-gnu/libffi.so.8 /lib/x86_64-linux-gnu/libm.so.6 /lib64/ld-linux-x86-64.so.2
do
        nm -D $lib
done  | awk '/^[^ ]/{print substr($0, 20)}'  | sed 's/@.*//g'  > libs.txt



comm -12 <(sort libs.txt) <(sort temacs.txt)
#+end_src
* customization
#ifndef ALIEN_DEFINITIONS
#define ALIEN_DEFINITIONS
#define error rpl_error
#define init_threads rpl_init_threads
#endif

* emacs build commands
#+begin_src sh
  git clean -f -d -x
  ./autogen.sh
  CC=clang CFLAGS="-fPIC -g -gdwarf-4 -rdynamic -Wno-unused-command-line-argument -Wno-missing-prototypes -lzmq" ./configure \
   --without-json \
   --without-xwidgets \
   --with-file-notification=inotify \
   --without-native-compilation \
   --with-included-regex \
   --without-xaw3d \
   --with-modules \
   --with-dumping=none \
   --with-cairo \
   --without-gpm \
   --with-x-toolkit=no \
   --without-rsvg \
   --without-threads
  cd src
  make -j8 emacs
  make -j8 temacs.so
  make -j8 clean
#+end_src

* run command
lx86cl64 --load ../../src/lisp/test.lisp


* mutex way
    pthread_mutex_t lock;
    pthread_cond_t cond;



    pthread_mutex_lock(&>lock);
    /* releasing the mutex and block untill a cond get a signal*/
    pthread_cond_wait(&cond, &lock);
    /* execute your code */

    your_condtion = 0;

    /* signaling the producer that we "consumed" the data */
    pthread_cond_signal(&cond);
    pthread_mutex_unlock(&lock);
* rpc test
#+begin_src
(eval (car (read-from-string "(length \"howdy\")")))

* how to check tests 
cd ../src/ && make -j8 emacs emacs.pdmp && cd ../test/

find . -name '*.log' -exec grep -Po "...unexpected" {} + | grep -v ' 0 unexpected' 
#+end_src
* condition check in elisp
#+begin_src lisp
(condition-case err
    (expand-file-name 123)
  (wrong-type-argument
   (message "here")))
#+end_src
* let test
#+begin_src lisp
  (let ((test1 4)) (setq test1 (+ 200 test1)))
#+end_src
* let stacktrace
./temacs(+0x3cf2cc) [0x55b2bab6b2cc]
./temacs(alien_print_backtrace+0x9) [0x55b2bab6b299]
./temacs(alien_rpc+0x35) [0x55b2bab6bf25]
./temacs(Falien_set_internal+0x4d) [0x55b2bab6ca5d]
./temacs(set_internal+0x95) [0x55b2baa8cb55]
./temacs(set_default_internal+0x38b) [0x55b2baa8d8bb]
./temacs(+0x3193f9) [0x55b2baab53f9]
./temacs(unbind_to+0xba) [0x55b2baaaaf1a]
./temacs(+0x312531) [0x55b2baaae531]
./temacs(Flet+0x5e1) [0x55b2baaae491]
./temacs(eval_sub+0x38e) [0x55b2baaab48e]
./temacs(Feval+0x96) [0x55b2baab1d06]
./temacs(eval_sub+0x94f) [0x55b2baaaba4f]
./temacs(Fprogn+0x5b) [0x55b2baaac1db]
./temacs(FletX+0x2dc) [0x55b2baaadd7c]
./temacs(eval_sub+0x38e) [0x55b2baaab48e]
./temacs(Fprogn+0x5b) [0x55b2baaac1db]
./temacs(Fcond+0xa7) [0x55b2baaac297]
./temacs(eval_sub+0x38e) [0x55b2baaab48e]
./temacs(Fprogn+0x5b) [0x55b2baaac1db]
./temacs(FletX+0x2dc) [0x55b2baaadd7c]
./temacs(eval_sub+0x38e) [0x55b2baaab48e]
./temacs(Fprogn+0x5b) [0x55b2baaac1db]
./temacs(prog_ignore+0x15) [0x55b2baaac2d5]
./temacs(Fwhile+0x62) [0x55b2baaae5a2]
./temacs(eval_sub+0x38e) [0x55b2baaab48e]
./temacs(Fprogn+0x5b) [0x55b2baaac1db]
./temacs(FletX+0x2dc) [0x55b2baaadd7c]
./temacs(eval_sub+0x38e) [0x55b2baaab48e]
./temacs(Fprogn+0x5b) [0x55b2baaac1db]
./temacs(eval_sub+0x38e) [0x55b2baaab48e]
./temacs(Fif+0x51) [0x55b2baaac151]
./temacs(eval_sub+0x38e) [0x55b2baaab48e]
./temacs(Fprogn+0x5b) [0x55b2baaac1db]
./temacs(Flet+0x5cc) [0x55b2baaae47c]
./temacs(eval_sub+0x38e) [0x55b2baaab48e]
./temacs(Fprogn+0x5b) [0x55b2baaac1db]
./temacs(Flet+0x5cc) [0x55b2baaae47c]
./temacs(eval_sub+0x38e) [0x55b2baaab48e]
./temacs(Fprogn+0x5b) [0x55b2baaac1db]
./temacs(+0x31824b) [0x55b2baab424b]
./temacs(+0x3163ff) [0x55b2baab23ff]
./temacs(eval_sub+0xea4) [0x55b2baaabfa4]
./temacs(Fprogn+0x5b) [0x55b2baaac1db]
./temacs(Flet+0x5cc) [0x55b2baaae47c]
./temacs(eval_sub+0x38e) [0x55b2baaab48e]
./temacs(Fprogn+0x5b) [0x55b2baaac1db]
./temacs(+0x31824b) [0x55b2baab424b]
./temacs(+0x3163ff) [0x55b2baab23ff]
./temacs(eval_sub+0xea4) [0x55b2baaabfa4]
./temacs(Funwind_protect+0x36) [0x55b2baaaf326]
./temacs(eval_sub+0x38e) [0x55b2baaab48e]
./temacs(Fprogn+0x5b) [0x55b2baaac1db]
./temacs(Flet+0x5cc) [0x55b2baaae47c]
./temacs(eval_sub+0x38e) [0x55b2baaab48e]
./temacs(Fprogn+0x5b) [0x55b2baaac1db]
./temacs(Fif+0x6f) [0x55b2baaac16f]
./temacs(eval_sub+0x38e) [0x55b2baaab48e]
./temacs(Fprogn+0x5b) [0x55b2baaac1db]
./temacs(+0x31824b) [0x55b2baab424b]
./temacs(+0x3163ff) [0x55b2baab23ff]
./temacs(eval_sub+0xea4) [0x55b2baaabfa4]
./temacs(Feval+0x96) [0x55b2baab1d06]
./temacs(eval_sub+0x94f) [0x55b2baaaba4f]
./temacs(+0x35700e) [0x55b2baaf300e]
./temacs(Fload+0x1152) [0x55b2baaf00f2]
./temacs(eval_sub+0x9e8) [0x55b2baaabae8]
./temacs(Feval+0x96) [0x55b2baab1d06]
./temacs(+0x25353d) [0x55b2ba9ef53d]
./temacs(internal_condition_case+0x88) [0x55b2baaafaa8]
./temacs(+0x2534a5) [0x55b2ba9ef4a5]
./temacs(internal_catch+0x43) [0x55b2baaaf053]
./temacs(+0x23a4c2) [0x55b2ba9d64c2]
./temacs(recursive_edit_1+0x102) [0x55b2ba9d62f2]
./temacs(Frecursive_edit+0x13e) [0x55b2ba9d686e]
./temacs(+0x23815e) [0x55b2ba9d415e]
./temacs(main+0x1b) [0x55b2ba9d28cb]
/lib/x86_64-linux-gnu/libc.so.6(+0x271ca) [0x7f8dcaaaa1ca]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0x85) [0x7f8dcaaaa285]
./temacs(_start+0x21) [0x55b2ba820711]
