;; Copyright (C) 2024 by Gleb Borodulia
;; Author: Gleb Borodulia <mr.reg@mail.ru>

;; This file is part of cl-emacs.

;; cl-emacs is free software: you can redistribute it and/or modify it
;; under the terms of the GNU General Public License as published by the
;; Free Software Foundation, either version 3 of the License, or (at your
;; option) any later version.

;; cl-emacs is distributed in the hope that it will be useful, but
;; WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
;; General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with cl-emacs. If not, see <https://www.gnu.org/licenses/>.

(uiop:define-package :cl-emacs/ccl
    (:use
     :common-lisp
     :defstar
     :cl-emacs/lib/log
     :alexandria
     :fiveam
     :cl-emacs/lib/commons))
(in-package :cl-emacs/ccl)
(log-enable :cl-emacs/ccl :debug2)
(named-readtables:in-readtable elisp-function-syntax)
(defun* ccl-execute ()
  #M"Execute CCL-PROGRAM with registers initialized by REGISTERS.

CCL-PROGRAM is a CCL program name (symbol)
or compiled code generated by ‘ccl-compile' (for backward compatibility.
In the latter case, the execution overhead is bigger than in the former).
No I/O commands should appear in CCL-PROGRAM.

REGISTERS is a vector of [R0 R1 ... R7] where RN is an initial value
for the Nth register.

As side effect, each element of REGISTERS holds the value of
the corresponding register after the execution.

See the documentation of ‘define-ccl-program' for a definition of CCL
programs.

(fn CCL-PROG REG)"
  (error 'unimplemented-error))
(defun* ccl-execute-on-string ()
  #M"Execute CCL-PROGRAM with initial STATUS on STRING.

CCL-PROGRAM is a symbol registered by ‘register-ccl-program',
or a compiled code generated by ‘ccl-compile' (for backward compatibility,
in this case, the execution is slower).

Read buffer is set to STRING, and write buffer is allocated automatically.

STATUS is a vector of [R0 R1 ... R7 IC], where
 R0..R7 are initial values of corresponding registers,
 IC is the instruction counter specifying from where to start the program.
If R0..R7 are nil, they are initialized to 0.
If IC is nil, it is initialized to head of the CCL program.

If optional 4th arg CONTINUE is non-nil, keep IC on read operation
when read buffer is exhausted, else, IC is always set to the end of
CCL-PROGRAM on exit.

It returns the contents of write buffer as a string,
 and as side effect, STATUS is updated.
If the optional 5th arg UNIBYTE-P is non-nil, the returned string
is a unibyte string.  By default it is a multibyte string.

See the documentation of ‘define-ccl-program' for the detail of CCL program.

(fn CCL-PROGRAM STATUS STRING &optional CONTINUE UNIBYTE-P)"
  (error 'unimplemented-error))
(defun* ccl-program-p ()
  #M"Return t if OBJECT is a CCL program name or a compiled CCL program code.
See the documentation of ‘define-ccl-program' for the detail of CCL program.

(fn OBJECT)"
  (error 'unimplemented-error))
(defun* register-ccl-program ()
  #M"Register CCL program CCL-PROG as NAME in ‘ccl-program-table'.
CCL-PROG should be a compiled CCL program (vector), or nil.
If it is nil, just reserve NAME as a CCL program name.
Return index number of the registered CCL program.

(fn NAME CCL-PROG)"
  (error 'unimplemented-error))
(defun* register-code-conversion-map ()
  #M"Register SYMBOL as code conversion map MAP.
Return index number of the registered map.

(fn SYMBOL MAP)"
  (error 'unimplemented-error))
