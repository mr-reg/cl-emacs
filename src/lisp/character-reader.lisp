#|
Copyright (C) 2024 by Gleb Borodulia
Author: Gleb Borodulia <mr.reg@mail.ru>

This file is part of cl-emacs.

cl-emacs is free software: you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the
Free Software Foundation, either version 3 of the License, or (at your
option) any later version.

cl-emacs is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with cl-emacs. If not, see <https://www.gnu.org/licenses/>.
|#
(uiop:define-package :cl-emacs/character-reader
    (:use
     :common-lisp
     :cl-emacs/log
     :alexandria
     :fiveam
     :cl-emacs/commons)
  (:import-from :common-lisp-user
                #:memq
                )
  (:local-nicknames (:el :cl-emacs/elisp)))
(in-package :cl-emacs/character-reader)
(log-enable :cl-emacs/character-reader :debug1)
(def-suite cl-emacs/character-reader)
(in-suite cl-emacs/character-reader)
(named-readtables:in-readtable mstrings:mstring-syntax)

(defclass character-reader-error (reader-error)
  ((input :initarg :input
          :initform nil
          :type string)
   (details :initarg :details
            :initform ""
            :type string)))
(defmethod print-object ((e character-reader-error) stream)
  (with-slots (input details) e
    (format stream "#<~a details:~s, input:~s>"
            (class-name (class-of e)) details input))
  )
(defclass incomplete-character-spec-error (character-reader-error)
  ())
(defclass invalid-character-spec-error (character-reader-error)
  ())
(defclass extra-symbols-in-character-spec-error (character-reader-error)
  ())

(defun read-emacs-character (input)
  #M"Read emacs character notation with all it's weird exceptions. 
     Initial ? sign should be omitted
     Return value: character code, because emacs has no special type for character"
  (block parsing
    (let ((mode 'toplevel)
          (n-chars (length input))
          (position 0)
          (result 0)
          (modifiers 0)
          (caret)
          (octals))
      (labels ((change-mode (new-mode)
                 (log-debug "new-mode ~s" new-mode)
                 (setq mode new-mode))
               (return-result ()
                 (unless (= position n-chars)
                   (error 'extra-symbols-in-character-spec-error
                          :input input
                          :details (let ((rem (- n-chars position)))
                                     (format nil "~a last character~p not parsed"
                                             rem rem))))
                 (when caret
                   (cond
                     ((<= 96 result 127)
                      (decf result 96))
                     ((<= 64 result 95)
                      (decf result 64))
                     (t
                      (incf result #x4000000))))
                 (incf result modifiers)
                 (return-from parsing result))
               (octals-to-code ()
                 (log-debug "octals ~s" octals)
                 (loop for oct in octals
                       for shift from 0 by 3
                       sum (ash oct shift)))
               (process-one-character (char)
                 (ecase mode
                   (toplevel
                    (cond
                      ((null char)
                       (if caret
                           (progn (setf result -1)
                                  (setf modifiers 0)
                                  (setf caret nil)
                                  (return-result))
                           (error 'incomplete-character-spec-error
                                  :input input
                                  :details "character specification is empty")))
                      ((memq char '(#\" #\( #\) #\[ #\]))
                       (error 'invalid-character-spec-error
                              :input input
                              :details (format nil "invalid symbol found ~a" char)))
                      ((eq char #\\) (change-mode 'special))
                      (t (incf result (char-code char))
                         (return-result))))
                   (special
                    (cond 
                      ((char<= #\0 char #\7)
                       (change-mode 'octal)
                       (push (- (char-code char) (char-code #\0)) octals))
                      ((eq char #\A) (incf modifiers #x400000) (change-mode 'modifier))
                      ((eq char #\C) (incf modifiers #x4000000) (change-mode 'modifier))
                      ((eq char #\H) (incf modifiers #x1000000) (change-mode 'modifier))
                      ((eq char #\M) (incf modifiers #x8000000) (change-mode 'modifier))
                      ((eq char #\S) (incf modifiers #x2000000) (change-mode 'modifier))
                      ((eq char #\^) (setq caret t)(change-mode 'toplevel))                      
                      (t (incf result (char-code char))
                         (return-result))))
                   (octal
                    (cond
                      ((null char)
                       (incf result (octals-to-code))
                       (return-result))
                      ((char<= #\0 char #\7)
                       (push (- (char-code char) (char-code #\0)) octals))
                      (t (error 'invalid-character-spec-error
                                :input input
                                :details (format nil "bad symbol in octal mode ~a" char)))))
                   (modifier
                    (cond
                      ((null char)
                       (error 'invalid-character-spec-error
                              :input input
                              :details "not found symbol - after the modifier"))
                      ((eq char #\-)
                       (change-mode 'toplevel))
                      (t (error 'invalid-character-spec-error
                                :input input
                                :details (format nil "bad symbol after the modifier ~a" char)))))
                   )))
        (loop for char across input
              do (incf position)
                 (process-one-character char)
              finally (progn
                        (process-one-character nil)
                        (error 'incomplete-character-spec-error
                               :input input
                               :details "unexpected end of character specification")))))))

(test read-from-string-characters
  (is (= 1 (read-emacs-character "")))
  (is (= 26 (read-emacs-character "")))
  (is (= 27 (read-emacs-character "")))
  (is (= 28 (read-emacs-character "")))
  (is (= 29 (read-emacs-character "")))
  (is (= 30 (read-emacs-character "")))
  (is (= 31 (read-emacs-character "")))
  (is (= 32 (read-emacs-character " ")))
  (is (= 33 (read-emacs-character "!")))
  (signals incomplete-character-spec-error (read-emacs-character ""))
  (signals invalid-character-spec-error (read-emacs-character "\")\""))
  (is (= 35 (read-emacs-character "#")))
  (is (= 36 (read-emacs-character "$")))
  (is (= 37 (read-emacs-character "%")))
  (is (= 38 (read-emacs-character "&")))
  (is (= 39 (read-emacs-character "'")))
  (signals invalid-character-spec-error (read-emacs-character "("))
  (signals invalid-character-spec-error (read-emacs-character "()"))
  (signals invalid-character-spec-error (read-emacs-character ")"))
  (is (= 42 (read-emacs-character "*")))
  (is (= 43 (read-emacs-character "+")))
  (is (= 44 (read-emacs-character ",")))
  (is (= 45 (read-emacs-character "-")))
  (is (= 46 (read-emacs-character ".")))
  (is (= 47 (read-emacs-character "/")))
  (is (= 48 (read-emacs-character "0")))
  (is (= 49 (read-emacs-character "1")))
  (is (= 50 (read-emacs-character "2")))
  (is (= 51 (read-emacs-character "3")))
  (is (= 52 (read-emacs-character "4")))
  (is (= 53 (read-emacs-character "5")))
  (is (= 54 (read-emacs-character "6")))
  (is (= 55 (read-emacs-character "7")))
  (is (= 56 (read-emacs-character "8")))
  (is (= 57 (read-emacs-character "9")))
  (is (= 58 (read-emacs-character ":")))
  (is (= 59 (read-emacs-character ";")))
  (is (= 60 (read-emacs-character "<")))
  (is (= 61 (read-emacs-character "=")))
  (is (= 62 (read-emacs-character ">")))
  (is (= 63 (read-emacs-character "?")))
  (is (= 64 (read-emacs-character "@")))
  (is (= 65 (read-emacs-character "A")))
  (is (= 90 (read-emacs-character "Z")))
  (signals invalid-character-spec-error (read-emacs-character "["))
  (is (= 32 (read-emacs-character "\\ ")))
  (is (= 1 (read-emacs-character "\\")))
  (is (= 26 (read-emacs-character "\\")))
  (is (= 27 (read-emacs-character "\\")))
  (is (= 28 (read-emacs-character "\\")))
  (is (= 29 (read-emacs-character "\\")))
  (is (= 30 (read-emacs-character "\\")))
  (is (= 31 (read-emacs-character "\\")))
  (is (= 32 (read-emacs-character "\\ ")))
  (is (= 33 (read-emacs-character "\\!")))
  (is (= 34 (read-emacs-character "\\\"")))
  (is (= 35 (read-emacs-character "\\#")))
  (is (= 36 (read-emacs-character "\\$")))
  (is (= 37 (read-emacs-character "\\%")))
  (is (= 38 (read-emacs-character "\\&")))
  (is (= 39 (read-emacs-character "\\'")))
  (is (= 40 (read-emacs-character "\\(")))
  (is (= 41 (read-emacs-character "\\)")))
  (is (= 42 (read-emacs-character "\\*")))
  (is (= 43 (read-emacs-character "\\+")))
  (is (= 44 (read-emacs-character "\\,")))
  (is (= 45 (read-emacs-character "\\-")))
  (is (= 46 (read-emacs-character "\\.")))
  (is (= 47 (read-emacs-character "\\/")))
  (is (= 0 (read-emacs-character "\\0")))
  (is (= 0 (read-emacs-character "\\000")))
  (signals invalid-character-spec-error (read-emacs-character "\\002."))
  (is (= 59 (read-emacs-character "\\073")))
  (is (= 1 (read-emacs-character "\\1")))
  (is (= 2 (read-emacs-character "\\02")))
  (is (= 137 (read-emacs-character "\\211")))
  (is (= 3 (read-emacs-character "\\3")))
  (is (= 255 (read-emacs-character "\\377")))
  (is (= 4 (read-emacs-character "\\4")))
  (is (= 292 (read-emacs-character "\\444")))
  (is (= 5 (read-emacs-character "\\5")))
  (is (= 438 (read-emacs-character "\\666")))
  (is (= 7 (read-emacs-character "\\7")))
  (is (= 448 (read-emacs-character "\\700")))
  (signals extra-symbols-in-character-spec-error (read-emacs-character "\\850"))
  (signals invalid-character-spec-error (read-emacs-character "\\508"))
  (is (= 56 (read-emacs-character "\\8")))
  (is (= 57 (read-emacs-character "\\9")))
  (is (= 58 (read-emacs-character "\\:")))
  (is (= 59 (read-emacs-character "\\;")))
  (is (= 60 (read-emacs-character "\\<")))
  (is (= 61 (read-emacs-character "\\=")))
  (is (= 62 (read-emacs-character "\\>")))
  (is (= 63 (read-emacs-character "\\?")))
  (is (= 64 (read-emacs-character "\\@")))
  (signals invalid-character-spec-error (read-emacs-character "\\A"))
  (signals incomplete-character-spec-error (read-emacs-character "\\A-"))
  (signals invalid-character-spec-error (read-emacs-character "\\AA"))
  (is (= 4194304 (read-emacs-character "\\A-\\0")))
  (is (= 4194304 (read-emacs-character "\\A-\\^@")))
  (is (= 4194403 (read-emacs-character "\\A-c")))
  (signals extra-symbols-in-character-spec-error (read-emacs-character "\\$-a"))
  (is (= 66 (read-emacs-character "\\B")))
  (signals invalid-character-spec-error (read-emacs-character "\\C"))
  ;; (is (= 67108911 (read-emacs-character "\\C-/")))
  ;; (is (= 67108925 (read-emacs-character "\\C-=")))
  ;; (is (= 127 (read-emacs-character "\\C-?")))
  ;; (is (= 0 (read-emacs-character "\\C-@")))
  ;; (is (= 19 (read-emacs-character "\\C-S")))
  ;; (is (= 67108864 (read-emacs-character "\\C-\\0")))
  ;; (is (= 201326825 (read-emacs-character "\\C-\\M-é")))
  ;; (is (= 27 (read-emacs-character "\\C-\\[")))
  ;; (is (= 67108991 (read-emacs-character "\\C-\\d")))
  ;; (is (= 30 (read-emacs-character "\\C-^")))
  ;; (is (= 1 (read-emacs-character "\\C-a")))
  ;; (is (= 2 (read-emacs-character "\\C-b")))
  ;; (is (= 3 (read-emacs-character "\\C-c")))
  ;; (is (= 4 (read-emacs-character "\\C-d")))
  ;; (is (= 5 (read-emacs-character "\\C-e")))
  ;; (is (= 6 (read-emacs-character "\\C-f")))
  ;; (is (= 7 (read-emacs-character "\\C-g")))
  ;; (is (= 8 (read-emacs-character "\\C-h")))
  ;; (is (= 9 (read-emacs-character "\\C-i")))
  ;; (is (= 10 (read-emacs-character "\\C-j")))
  ;; (is (= 12 (read-emacs-character "\\C-l")))
  ;; (is (= 13 (read-emacs-character "\\C-m")))
  ;; (is (= 14 (read-emacs-character "\\C-n")))
  ;; (is (= 15 (read-emacs-character "\\C-o")))
  ;; (is (= 16 (read-emacs-character "\\C-p")))
  ;; (is (= 17 (read-emacs-character "\\C-q")))
  ;; (is (= 18 (read-emacs-character "\\C-r")))
  ;; (is (= 19 (read-emacs-character "\\C-s")))
  ;; (is (= 20 (read-emacs-character "\\C-t")))
  ;; (is (= 21 (read-emacs-character "\\C-u")))
  ;; (is (= 22 (read-emacs-character "\\C-v")))
  ;; (is (= 23 (read-emacs-character "\\C-w")))
  ;; (is (= 24 (read-emacs-character "\\C-x")))
  ;; (is (= 25 (read-emacs-character "\\C-y")))
  ;; (is (= 26 (read-emacs-character "\\C-z")))
  ;; (is (= 67109097 (read-emacs-character "\\C-é")))
  ;; (is (= 67109207 (read-emacs-character "\\C-ŗ")))
  ;; (is (= 68 (read-emacs-character "\\D")))
  ;; (is (= 69 (read-emacs-character "\\E")))
  ;; (is (= 70 (read-emacs-character "\\F")))
  ;; (is (= 71 (read-emacs-character "\\G")))
  ;; (is (= error, (read-emacs-character "\\H") modifier)) 
  ;; (is (= 16777216 (read-emacs-character "\\H-\\0")))
  ;; (is (= 16777315 (read-emacs-character "\\H-c")))
  ;; (is (= 73 (read-emacs-character "\\I")))
  ;; (is (= 74 (read-emacs-character "\\J")))
  ;; (is (= 75 (read-emacs-character "\\K")))
  ;; (is (= 76 (read-emacs-character "\\L")))
  ;; (is (= error, (read-emacs-character "\\M") modifier)) 
  ;; (is (=  134217760 (read-emacs-character "\\M-")))
  ;; (is (= 134217773 (read-emacs-character "\\M--")))
  ;; (is (= 134217776 (read-emacs-character "\\M-0")))
  ;; (is (= 134217777 (read-emacs-character "\\M-1")))
  ;; (is (= 134217778 (read-emacs-character "\\M-2")))
  ;; (is (= 134217779 (read-emacs-character "\\M-3")))
  ;; (is (= 134217780 (read-emacs-character "\\M-4")))
  ;; (is (= 134217781 (read-emacs-character "\\M-5")))
  ;; (is (= 134217782 (read-emacs-character "\\M-6")))
  ;; (is (= 134217783 (read-emacs-character "\\M-7")))
  ;; (is (= 134217784 (read-emacs-character "\\M-8")))
  ;; (is (= 134217785 (read-emacs-character "\\M-9")))
  ;; (is (= 134217728 (read-emacs-character "\\M-\\0")))
  ;; (is (= 134217728 (read-emacs-character "\\M-\\C-@")))
  ;; (is (= 134217728 (read-emacs-character "\\M-\\^@")))
  ;; (is (= 134217825 (read-emacs-character "\\M-a")))
  ;; (is (= 134217827 (read-emacs-character "\\M-c")))
  ;; (is (= 134217842 (read-emacs-character "\\M-r")))
  ;; (is (= 134217843 (read-emacs-character "\\M-s")))
  ;; (is (= 134217846 (read-emacs-character "\\M-v")))
  ;; (is (= 134217848 (read-emacs-character "\\M-x")))
  ;; (is (= error, (read-emacs-character "\\N") no brace)) 
  ;; (is (= 224 (read-emacs-character "\\N{LATIN SMALL LETTER A WITH GRAVE}"))) 
  ;; (is (= 10052 (read-emacs-character "\\N{SNOWFLAKE}")))
  ;; (is (= 1114111 (read-emacs-character "\\N{U+10ffff}")))
  ;; (is (= 224 (read-emacs-character "\\N{U+E0}")))
  ;; (is (= 65535 (read-emacs-character "\\N{U+ffff}")))
  ;; (is (= 79 (read-emacs-character "\\O")))
  ;; (is (= 80 (read-emacs-character "\\P")))
  ;; (is (= 81 (read-emacs-character "\\Q")))
  ;; (is (= 82 (read-emacs-character "\\R")))
  ;; (is (= error,modifier (read-emacs-character "\\S"))) 
  ;; (is (= 33554432 (read-emacs-character "\\S-\\0")))
  ;; (is (= 33554432 (read-emacs-character "\\S-\\^@")))
  ;; (is (= 33554464 (read-emacs-character "\\S-\\s")))
  ;; (is (= 33554529 (read-emacs-character "\\S-a.")))
  ;; (is (= 33554531 (read-emacs-character "\\S-c")))
  ;; (is (= 84 (read-emacs-character "\\T")))
  ;; (is (= -> (read-emacs-character "\\U"))) error, no hex code
  ;; (is (= 224 (read-emacs-character "\\U000000E0")))
  ;; (is (= 86 (read-emacs-character "\\V")))
  ;; (is (= 87 (read-emacs-character "\\W")))
  ;; (is (= 88 (read-emacs-character "\\X")))
  ;; (is (= 89 (read-emacs-character "\\Y")))
  ;; (is (= 90 (read-emacs-character "\\Z")))
  ;; (is (= 91 (read-emacs-character "\\[")))
  ;; (is (= 91 (read-emacs-character "\\[.")))
  ;; (is (= 92 (read-emacs-character "\\\\")))
  ;; (is (= 93 (read-emacs-character "\\]")))
  (is (= 37748843 (read-emacs-character "\\A-\\S-k")))
  (is (= 71303216 (read-emacs-character "\\^\\A-0")))
  (is (= 71303168 (read-emacs-character "\\^\\A-\\0")))
  (is (= -1 (read-emacs-character "\\^")))
  (is (= -1 (read-emacs-character "\\A-\\^")))
  ;; (is (= 127 (read-emacs-character "\\^?")))
  (is (= 3 (read-emacs-character "\\^C")))
  (is (= 13 (read-emacs-character "\\^M")))
  ;; (is (= 28 (read-emacs-character "\\^\\\\")))
  ;; (is (= 29 (read-emacs-character "\\^\\]")))
  (is (= 31 (read-emacs-character "\\^_")))
  ;; (is (= 31 (read-emacs-character "?\^!")))
  ;; (is (= 31 (read-emacs-character "?\^~")))
  (is (= 1 (read-emacs-character "\\^a")))
  (is (= 26 (read-emacs-character "\\^z")))
  ;; (is (= 95 (read-emacs-character "\\_")))
  ;; (is (= 96 (read-emacs-character "\\`")))
  ;; (is (= 7 (read-emacs-character "\\a")))
  ;; (is (= 8 (read-emacs-character "\\b")))
  ;; (is (= 99 (read-emacs-character "\\c")))
  ;; (is (= 127 (read-emacs-character "\\d")))
  ;; (is (= 27 (read-emacs-character "\\e")))
  ;; (is (= 12 (read-emacs-character "\\f")))
  ;; (is (= 103 (read-emacs-character "\\g")))
  ;; (is (= 104 (read-emacs-character "\\h")))
  ;; (is (= 105 (read-emacs-character "\\i")))
  ;; (is (= 106 (read-emacs-character "\\j")))
  ;; (is (= 107 (read-emacs-character "\\k")))
  ;; (is (= 108 (read-emacs-character "\\l")))
  ;; (is (= 109 (read-emacs-character "\\m")))
  ;; (is (= 10 (read-emacs-character "\\n")))
  ;; (is (= 111 (read-emacs-character "\\o")))
  ;; (is (= 112 (read-emacs-character "\\p")))
  ;; (is (= 113 (read-emacs-character "\\q")))
  ;; (is (= 13 (read-emacs-character "\\r")))
  ;; (is (= 32 (read-emacs-character "\\s")))
  ;; (is (= 8388608 (read-emacs-character "\\s-\\0")))
  ;; (is (= 8388707 (read-emacs-character "\\s-c")))
  ;; (is (= 9 (read-emacs-character "\\t")))
  ;; (is (= error,no (read-emacs-character "\\u") hex code)) 
  ;; (is (= error,bad (read-emacs-character "\\u003") hex code)) 
  ;; (is (= 0 (read-emacs-character "\\u0000")))
  ;; (is (= 33 (read-emacs-character "\\u0021")))
  ;; (is (= 224 (read-emacs-character "\\u00e0")))
  ;; (is (= 8364 (read-emacs-character "\\u20AC")))
  ;; (is (= 64831 (read-emacs-character "\\uFD3F")))
  ;; (is (= 11 (read-emacs-character "\\v")))
  ;; (is (= 119 (read-emacs-character "\\w")))
  ;; (is (= 0 (read-emacs-character "\\x")))
  ;; (is (= 1114112 (read-emacs-character "\\x00110000")))
  ;; (is (= 1 (read-emacs-character "\\x1")))
  ;; (is (= 7 (read-emacs-character "\\x7")))
  ;; (is (= 1792 (read-emacs-character "\\x700")))
  ;; (is (= 128 (read-emacs-character "\\x80")))
  ;; (is (= 0 (read-emacs-character "\\x????")))
  ;; (is (= 230 (read-emacs-character "\\xE6")))
  ;; (is (= 15 (read-emacs-character "\\xF")))
  ;; (is (= 160 (read-emacs-character "\\xa0")))
  ;; (is (= 246 (read-emacs-character "\\xf6")))
  ;; (is (= 255 (read-emacs-character "\\xff")))
  ;; (is (= 121 (read-emacs-character "\\y")))
  ;; (is (= 122 (read-emacs-character "\\z")))
  ;; (is (= 123 (read-emacs-character "\\{")))
  ;; (is (= 124 (read-emacs-character "\\|")))
  ;; (is (= 125 (read-emacs-character "\\}")))
  ;; (is (= 126 (read-emacs-character "\\~")))
  ;; (is (= 127 (read-emacs-character "\\")))
  ;; (is (= 160 (read-emacs-character "\\ ")))
  ;; (is (= 1044 (read-emacs-character "\\Д")))
  ;; (is (= error,invalid (read-emacs-character "]") syntax)) 
  ;; (is (= 94 (read-emacs-character "^")))
  ;; (is (= 95 (read-emacs-character "_")))
  ;; (is (= 96 (read-emacs-character "`")))
  ;; (is (= 97 (read-emacs-character "a")))
  ;; (is (= 98 (read-emacs-character "b")))
  ;; (is (= 99 (read-emacs-character "c")))
  ;; (is (= 100 (read-emacs-character "d")))
  ;; (is (= 101 (read-emacs-character "e")))
  ;; (is (= 102 (read-emacs-character "f")))
  ;; (is (= 103 (read-emacs-character "g")))
  ;; (is (= 104 (read-emacs-character "h")))
  ;; (is (= 105 (read-emacs-character "i")))
  ;; (is (= 106 (read-emacs-character "j")))
  ;; (is (= 107 (read-emacs-character "k")))
  ;; (is (= 108 (read-emacs-character "l")))
  ;; (is (= 109 (read-emacs-character "m")))
  ;; (is (= 110 (read-emacs-character "n")))
  ;; (is (= 111 (read-emacs-character "o")))
  ;; (is (= 112 (read-emacs-character "p")))
  ;; (is (= 113 (read-emacs-character "q")))
  ;; (is (= 114 (read-emacs-character "r")))
  ;; (is (= 115 (read-emacs-character "s")))
  ;; (is (= 116 (read-emacs-character "t")))
  ;; (is (= 117 (read-emacs-character "u")))
  ;; (is (= 118 (read-emacs-character "v")))
  ;; (is (= 119 (read-emacs-character "w")))
  ;; (is (= 120 (read-emacs-character "x")))
  ;; (is (= 121 (read-emacs-character "y")))
  ;; (is (= 122 (read-emacs-character "z")))
  ;; (is (= 123 (read-emacs-character "{")))
  ;; (is (= 124 (read-emacs-character "|")))
  ;; (is (= 125 (read-emacs-character "}")))
  ;; (is (= 126 (read-emacs-character "~")))
  ;; (is (= 127 (read-emacs-character "")))
  ;; (is (= 160 (read-emacs-character " ")))
  ;; (is (= 169 (read-emacs-character "©")))
  ;; (is (= 1044 (read-emacs-character "Д")))
  ;; (is (= 1069 (read-emacs-character "Э")))
  ;; (is (= 9785 (read-emacs-character "☹")))
  ;; (is (= 128169 (read-emacs-character "💩")))
  ;; (is (= 128512 (read-emacs-character "😀")))
  ;; (is (= 8324 (read-emacs-character "\\N{SUBSCRIPT FOUR}"))) 
  )
(defun test-me ()
  (run! 'cl-emacs/character-reader))
